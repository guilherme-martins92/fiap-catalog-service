AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for fiap-catalog-service

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 100

    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
Resources:
  NetCodeWebAPIServerless:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description:
        A simple example includes a .NET Core WebAPI App with DynamoDB
        table.
      CodeUri: ./src/fiap-catalog-service/
      Handler: fiap-catalog-service
      Runtime: dotnet8
      MemorySize: 1024
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          VEHICLES_TABLE: !Ref VehiclesTable
      Policies:
        # Give Create/Read/Update/Delete Permissions to the VehiclesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref VehiclesTable
        - Statement:
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource: !GetAtt VehicleEventsQueue.Arn
      Events:
        ProxyResource:
          Type: HttpApi
          Properties:
            PayloadFormatVersion: "2.0"
            Path: /{proxy+}
            Method: ANY
        RootResource:
          PayloadFormatVersion: "2.0"
          Type: HttpApi
          Properties:
            Path: /
            Method: ANY

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  VehiclesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Vehicles
      PrimaryKey:
        Name: Id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  VehicleEventsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: VehicleEventsQueue
      VisibilityTimeout: 30 # Tempo máximo que uma mensagem fica invisível após ser consumida
      MessageRetentionPeriod: 86400 # Retenção de mensagens (1 dia)
      ReceiveMessageWaitTimeSeconds: 10 # Polling longo para reduzir consumo excessivo

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"
